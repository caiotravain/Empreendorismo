# Generated by Django 5.2.4 on 2025-09-04 00:10

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('dashboard', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Doctor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('medical_license', models.CharField(help_text="Doctor's medical license number", max_length=50, unique=True)),
                ('specialization', models.CharField(help_text="Doctor's medical specialization", max_length=100)),
                ('phone', models.CharField(blank=True, help_text="Doctor's phone number", max_length=20, null=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('years_of_experience', models.PositiveIntegerField(default=0, help_text='Years of medical experience')),
                ('hospital_affiliation', models.CharField(blank=True, help_text='Hospital or clinic affiliation', max_length=200, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether the doctor is currently active')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When this doctor profile was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When this doctor profile was last updated')),
            ],
            options={
                'verbose_name': 'Doctor',
                'verbose_name_plural': 'Doctors',
                'ordering': ['user__last_name', 'user__first_name'],
            },
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(help_text="Patient's first name", max_length=100)),
                ('last_name', models.CharField(help_text="Patient's last name", max_length=100)),
                ('email', models.EmailField(blank=True, help_text="Patient's email address", max_length=254, null=True)),
                ('phone', models.CharField(blank=True, help_text="Patient's phone number", max_length=20, null=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('date_of_birth', models.DateField(help_text="Patient's date of birth")),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], help_text="Patient's gender", max_length=10)),
                ('address', models.TextField(blank=True, help_text="Patient's address", null=True)),
                ('city', models.CharField(blank=True, help_text="Patient's city", max_length=100, null=True)),
                ('state', models.CharField(blank=True, help_text="Patient's state", max_length=100, null=True)),
                ('zip_code', models.CharField(blank=True, help_text="Patient's ZIP code", max_length=20, null=True)),
                ('emergency_contact_name', models.CharField(blank=True, help_text='Emergency contact name', max_length=200, null=True)),
                ('emergency_contact_phone', models.CharField(blank=True, help_text='Emergency contact phone', max_length=20, null=True)),
                ('medical_insurance', models.CharField(blank=True, help_text='Medical insurance information', max_length=200, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When this patient record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When this patient record was last updated')),
            ],
            options={
                'verbose_name': 'Patient',
                'verbose_name_plural': 'Patients',
                'ordering': ['last_name', 'first_name'],
            },
        ),
        migrations.RemoveIndex(
            model_name='medicalrecord',
            name='dashboard_m_patient_e0a53a_idx',
        ),
        migrations.RemoveIndex(
            model_name='medicalrecord',
            name='dashboard_m_doctor__97fd2f_idx',
        ),
        migrations.RemoveField(
            model_name='medicalrecord',
            name='doctor_id',
        ),
        migrations.RemoveField(
            model_name='medicalrecord',
            name='doctor_user',
        ),
        migrations.RemoveField(
            model_name='medicalrecord',
            name='patient_id',
        ),
        migrations.AddField(
            model_name='medicalrecord',
            name='legacy_doctor_id',
            field=models.CharField(blank=True, help_text='Legacy doctor ID (for migration compatibility)', max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='medicalrecord',
            name='legacy_patient_id',
            field=models.CharField(blank=True, help_text='Legacy patient ID (for migration compatibility)', max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='doctor',
            name='user',
            field=models.OneToOneField(help_text='Django User object for the doctor', on_delete=django.db.models.deletion.CASCADE, related_name='doctor_profile', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='medicalrecord',
            name='doctor',
            field=models.ForeignKey(blank=True, help_text='Doctor who created this medical record', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='medical_records', to='dashboard.doctor'),
        ),
        migrations.AddIndex(
            model_name='patient',
            index=models.Index(fields=['last_name', 'first_name'], name='dashboard_p_last_na_3016eb_idx'),
        ),
        migrations.AddIndex(
            model_name='patient',
            index=models.Index(fields=['email'], name='dashboard_p_email_b4bc8a_idx'),
        ),
        migrations.AddIndex(
            model_name='patient',
            index=models.Index(fields=['phone'], name='dashboard_p_phone_ba7291_idx'),
        ),
        migrations.AddField(
            model_name='medicalrecord',
            name='patient',
            field=models.ForeignKey(blank=True, help_text='Patient this medical record belongs to', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='medical_records', to='dashboard.patient'),
        ),
        migrations.AddIndex(
            model_name='medicalrecord',
            index=models.Index(fields=['patient'], name='dashboard_m_patient_e0a53a_idx'),
        ),
        migrations.AddIndex(
            model_name='medicalrecord',
            index=models.Index(fields=['doctor'], name='dashboard_m_doctor__97fd2f_idx'),
        ),
        migrations.AddIndex(
            model_name='doctor',
            index=models.Index(fields=['medical_license'], name='dashboard_d_medical_fe2bf3_idx'),
        ),
        migrations.AddIndex(
            model_name='doctor',
            index=models.Index(fields=['specialization'], name='dashboard_d_special_21c694_idx'),
        ),
        migrations.AddIndex(
            model_name='doctor',
            index=models.Index(fields=['is_active'], name='dashboard_d_is_acti_6fc472_idx'),
        ),
    ]
